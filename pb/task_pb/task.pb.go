// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.19.4
// source: task.proto

package task_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RedisMsg Redis 消息结构
type RedisMsg struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Op       int32                  `protobuf:"varint,1,opt,name=op,proto3" json:"op,omitempty"`                            // 操作类型
	ServerId string                 `protobuf:"bytes,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"` // 服务器ID (可选)
	RoomId   int32                  `protobuf:"varint,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`      // 房间ID (可选)
	UserId   int32                  `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`      // 用户ID (可选)
	Msg      []byte                 `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`                           // 消息内容
	Count    int32                  `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`                      // 计数
	// 使用 map<string, string> 替代原始结构
	RoomUserInfo  map[string]string `protobuf:"bytes,7,rep,name=room_user_info,json=roomUserInfo,proto3" json:"room_user_info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisMsg) Reset() {
	*x = RedisMsg{}
	mi := &file_task_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisMsg) ProtoMessage() {}

func (x *RedisMsg) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisMsg.ProtoReflect.Descriptor instead.
func (*RedisMsg) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{0}
}

func (x *RedisMsg) GetOp() int32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *RedisMsg) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *RedisMsg) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RedisMsg) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RedisMsg) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *RedisMsg) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RedisMsg) GetRoomUserInfo() map[string]string {
	if x != nil {
		return x.RoomUserInfo
	}
	return nil
}

// RedisRoomInfo Redis 房间信息
type RedisRoomInfo struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Op     int32                  `protobuf:"varint,1,opt,name=op,proto3" json:"op,omitempty"`                       // 操作类型
	RoomId int32                  `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"` // 房间ID (可选)
	Count  int32                  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`                 // 计数 (可选)
	// 使用 map<string, string> 替代原始结构
	RoomUserInfo  map[string]string `protobuf:"bytes,4,rep,name=room_user_info,json=roomUserInfo,proto3" json:"room_user_info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisRoomInfo) Reset() {
	*x = RedisRoomInfo{}
	mi := &file_task_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisRoomInfo) ProtoMessage() {}

func (x *RedisRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisRoomInfo.ProtoReflect.Descriptor instead.
func (*RedisRoomInfo) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{1}
}

func (x *RedisRoomInfo) GetOp() int32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *RedisRoomInfo) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RedisRoomInfo) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RedisRoomInfo) GetRoomUserInfo() map[string]string {
	if x != nil {
		return x.RoomUserInfo
	}
	return nil
}

// RedisRoomCountMsg Redis 房间计数消息
type RedisRoomCountMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int32                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"` // 计数 (可选)
	Op            int32                  `protobuf:"varint,2,opt,name=op,proto3" json:"op,omitempty"`       // 操作类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisRoomCountMsg) Reset() {
	*x = RedisRoomCountMsg{}
	mi := &file_task_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisRoomCountMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisRoomCountMsg) ProtoMessage() {}

func (x *RedisRoomCountMsg) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisRoomCountMsg.ProtoReflect.Descriptor instead.
func (*RedisRoomCountMsg) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{2}
}

func (x *RedisRoomCountMsg) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RedisRoomCountMsg) GetOp() int32 {
	if x != nil {
		return x.Op
	}
	return 0
}

// SuccessReply 通用成功响应
type SuccessReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 状态码
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 消息内容
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SuccessReply) Reset() {
	*x = SuccessReply{}
	mi := &file_task_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuccessReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuccessReply) ProtoMessage() {}

func (x *SuccessReply) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuccessReply.ProtoReflect.Descriptor instead.
func (*SuccessReply) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{3}
}

func (x *SuccessReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SuccessReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_task_proto protoreflect.FileDescriptor

const file_task_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"task.proto\x12\atask_pb\"\x9d\x02\n" +
	"\bRedisMsg\x12\x0e\n" +
	"\x02op\x18\x01 \x01(\x05R\x02op\x12\x1b\n" +
	"\tserver_id\x18\x02 \x01(\tR\bserverId\x12\x17\n" +
	"\aroom_id\x18\x03 \x01(\x05R\x06roomId\x12\x17\n" +
	"\auser_id\x18\x04 \x01(\x05R\x06userId\x12\x10\n" +
	"\x03msg\x18\x05 \x01(\fR\x03msg\x12\x14\n" +
	"\x05count\x18\x06 \x01(\x05R\x05count\x12I\n" +
	"\x0eroom_user_info\x18\a \x03(\v2#.task_pb.RedisMsg.RoomUserInfoEntryR\froomUserInfo\x1a?\n" +
	"\x11RoomUserInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xdf\x01\n" +
	"\rRedisRoomInfo\x12\x0e\n" +
	"\x02op\x18\x01 \x01(\x05R\x02op\x12\x17\n" +
	"\aroom_id\x18\x02 \x01(\x05R\x06roomId\x12\x14\n" +
	"\x05count\x18\x03 \x01(\x05R\x05count\x12N\n" +
	"\x0eroom_user_info\x18\x04 \x03(\v2(.task_pb.RedisRoomInfo.RoomUserInfoEntryR\froomUserInfo\x1a?\n" +
	"\x11RoomUserInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"9\n" +
	"\x11RedisRoomCountMsg\x12\x14\n" +
	"\x05count\x18\x01 \x01(\x05R\x05count\x12\x0e\n" +
	"\x02op\x18\x02 \x01(\x05R\x02op\"4\n" +
	"\fSuccessReply\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msgB\x15Z\x13yoyichat/pb/task_pbb\x06proto3"

var (
	file_task_proto_rawDescOnce sync.Once
	file_task_proto_rawDescData []byte
)

func file_task_proto_rawDescGZIP() []byte {
	file_task_proto_rawDescOnce.Do(func() {
		file_task_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_task_proto_rawDesc), len(file_task_proto_rawDesc)))
	})
	return file_task_proto_rawDescData
}

var file_task_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_task_proto_goTypes = []any{
	(*RedisMsg)(nil),          // 0: task_pb.RedisMsg
	(*RedisRoomInfo)(nil),     // 1: task_pb.RedisRoomInfo
	(*RedisRoomCountMsg)(nil), // 2: task_pb.RedisRoomCountMsg
	(*SuccessReply)(nil),      // 3: task_pb.SuccessReply
	nil,                       // 4: task_pb.RedisMsg.RoomUserInfoEntry
	nil,                       // 5: task_pb.RedisRoomInfo.RoomUserInfoEntry
}
var file_task_proto_depIdxs = []int32{
	4, // 0: task_pb.RedisMsg.room_user_info:type_name -> task_pb.RedisMsg.RoomUserInfoEntry
	5, // 1: task_pb.RedisRoomInfo.room_user_info:type_name -> task_pb.RedisRoomInfo.RoomUserInfoEntry
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_task_proto_init() }
func file_task_proto_init() {
	if File_task_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_task_proto_rawDesc), len(file_task_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_task_proto_goTypes,
		DependencyIndexes: file_task_proto_depIdxs,
		MessageInfos:      file_task_proto_msgTypes,
	}.Build()
	File_task_proto = out.File
	file_task_proto_goTypes = nil
	file_task_proto_depIdxs = nil
}
